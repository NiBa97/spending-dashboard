// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model TransactionCategoryMapping {
    id       Int    @id @default(autoincrement())
    userId   String
    user     User   @relation(fields: [userId], references: [id])
    hash     String @unique
    category String
}

model CategoryMappingRule {
    id       Int    @id @default(autoincrement())
    userId   String
    user     User   @relation(fields: [userId], references: [id])
    hash     String @unique
    category String
}

model Payment {
    id                String           @id @default(cuid())
    amount            Float
    date              DateTime
    name              String
    userId            String
    user              User             @relation(fields: [userId], references: [id])
    PaymentSchedule   PaymentSchedule? @relation(fields: [paymentScheduleId], references: [id])
    paymentScheduleId String?
}

model PaymentSchedule {
    id             String    @id @default(cuid())
    userId         String
    user           User      @relation(fields: [userId], references: [id])
    linkedPayments Payment[]
    amount         Float
    name           String
    startDate      DateTime
    lastRun        DateTime?
    schedule       String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                         String                       @id @default(cuid())
    name                       String?
    email                      String?                      @unique
    emailVerified              DateTime?
    image                      String?
    accounts                   Account[]
    sessions                   Session[]
    Payment                    Payment[]
    PaymentSchedule            PaymentSchedule[]
    TransactionCategoryMapping TransactionCategoryMapping[]
    CategoryMappingRule        CategoryMappingRule[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
