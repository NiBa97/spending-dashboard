// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Payment {
    id                String           @id @default(cuid())
    amount            Float
    date              DateTime
    name              String
    userId            String
    user              User             @relation(fields: [userId], references: [id])
    PaymentSchedule   PaymentSchedule? @relation(fields: [paymentScheduleId], references: [id])
    paymentScheduleId String?
}

model PaymentSchedule {
    id             String    @id @default(cuid())
    userId         String
    user           User      @relation(fields: [userId], references: [id])
    linkedPayments Payment[]
    amount         Float
    name           String
    startDate      DateTime
    lastRun        DateTime?
    schedule       String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String            @id @default(cuid())
    name            String?
    email           String?           @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    Payment         Payment[]
    PaymentSchedule PaymentSchedule[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
